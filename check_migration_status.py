#!/usr/bin/env python3
"""
Script per verificare lo stato della migrazione senza dipendenze esterne
"""

import os
import sys

def check_env_file():
    """Controlla la configurazione del file .env"""
    print("üìã Controllo configurazione...")
    
    if not os.path.exists('.env'):
        print("‚ùå File .env non trovato")
        print("üìù Copia .env.example in .env e configura le variabili")
        return False
    
    print("‚úÖ File .env trovato")
    
    # Leggi le variabili principali
    env_vars = {}
    try:
        with open('.env', 'r') as f:
            for line in f:
                if '=' in line and not line.strip().startswith('#'):
                    key, value = line.strip().split('=', 1)
                    env_vars[key] = value
    except Exception as e:
        print(f"‚ö†Ô∏è  Errore lettura .env: {e}")
        return False
    
    # Controlla variabili essenziali
    required_vars = ['SUPABASE_URL', 'SUPABASE_ANON_KEY']
    missing_vars = []
    
    for var in required_vars:
        if var not in env_vars or not env_vars[var] or env_vars[var] in ['', 'your-url-here', 'your-key-here']:
            missing_vars.append(var)
        else:
            print(f"‚úÖ {var}: configurato")
    
    if missing_vars:
        print(f"‚ùå Variabili mancanti o non configurate: {', '.join(missing_vars)}")
        return False
    
    return True

def check_files_exist():
    """Controlla che tutti i file necessari esistano"""
    print("\nüìÅ Controllo file necessari...")
    
    required_files = [
        'migration_add_ticket_fields.sql',
        'app/templates/tickets.html',
        'app/templates/settings.html',
        'app/static/js/tickets.js',
        'app/static/js/settings.js',
        'app/app.py'
    ]
    
    all_exist = True
    
    for file_path in required_files:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} - MANCANTE!")
            all_exist = False
    
    return all_exist

def show_migration_instructions():
    """Mostra le istruzioni per la migrazione"""
    print("\n" + "=" * 60)
    print("üõ†Ô∏è  ISTRUZIONI PER LA MIGRAZIONE")
    print("=" * 60)
    
    print("\nüìã OPZIONI DISPONIBILI:")
    print("\n1Ô∏è‚É£  MIGRAZIONE AUTOMATICA (consigliata):")
    print("   bash migrate.sh")
    print("   ‚Üí Tenta migrazione automatica e fornisce istruzioni")
    
    print("\n2Ô∏è‚É£  MIGRAZIONE MANUALE SUPABASE:")
    print("   ‚Ä¢ Vai su: https://supabase.com/dashboard")
    print("   ‚Ä¢ Apri il tuo progetto")
    print("   ‚Ä¢ Vai in SQL Editor")
    print("   ‚Ä¢ Copia e incolla il contenuto di: migration_add_ticket_fields.sql")
    print("   ‚Ä¢ Clicca 'Run'")
    
    print("\n3Ô∏è‚É£  MIGRAZIONE CON PYTHON (se hai dipendenze):")
    print("   pip install supabase python-dotenv")
    print("   python3 simple_migration.py")
    
    print("\n4Ô∏è‚É£  MIGRAZIONE CON DOCKER:")
    print("   make migrate-supabase")
    
    print("\nüéØ COSA FA LA MIGRAZIONE:")
    print("‚Ä¢ Aggiunge 7 nuovi campi alla tabella tickets:")
    print("  - software, group, type (configurabili)")
    print("  - rapporto_danea, id_assistenza (editabili)")
    print("  - password_teleassistenza, numero_richiesta_teleassistenza (editabili)")
    print("‚Ä¢ Crea tabelle di configurazione per i menu a tendina")
    print("‚Ä¢ Popola le opzioni predefinite")
    
    print("\n‚úÖ DOPO LA MIGRAZIONE:")
    print("‚Ä¢ Il modal di modifica ticket mostrer√† tutti i campi richiesti")
    print("‚Ä¢ Potrai configurare le opzioni in /settings")
    print("‚Ä¢ Tutti i menu a tendina saranno configurabili")

def show_current_implementation():
    """Mostra l'implementazione attuale"""
    print("\n" + "=" * 60)
    print("üìã IMPLEMENTAZIONE CORRENTE")
    print("=" * 60)
    
    print("\n‚úÖ GI√Ä IMPLEMENTATO:")
    print("‚Ä¢ Modal di modifica ticket con layout a due colonne")
    print("‚Ä¢ Tutti i campi richiesti nel form HTML")
    print("‚Ä¢ JavaScript per gestire tutti i nuovi campi")
    print("‚Ä¢ Pagina /settings per configurare le opzioni")
    print("‚Ä¢ API endpoints per software, gruppi, tipi, sistema")
    print("‚Ä¢ Schema database aggiornato")
    print("‚Ä¢ CSS responsive per il nuovo layout")
    
    print("\nüîÑ RIMANE DA FARE:")
    print("‚Ä¢ Eseguire la migrazione del database")
    print("‚Ä¢ Testare il modal con i nuovi campi")
    
    print("\nüìÑ FILE CHIAVE MODIFICATI:")
    files_info = [
        ("app/templates/tickets.html", "Modal modifica con tutti i campi"),
        ("app/templates/settings.html", "Pagina impostazioni"),
        ("app/static/js/tickets.js", "Logica JavaScript completa"),
        ("app/static/js/settings.js", "Gestione configurazioni"),
        ("app/app.py", "API endpoints aggiunti"),
        ("app/static/css/style.css", "Stili per layout a colonne")
    ]
    
    for file_path, description in files_info:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path} - {description}")
        else:
            print(f"‚ùå {file_path} - MANCANTE!")

def main():
    """Funzione principale"""
    print("üîç CRM Pro - Controllo Stato Migrazione")
    print("=" * 50)
    
    # Controlli
    env_ok = check_env_file()
    files_ok = check_files_exist()
    
    # Mostra stato
    print("\nüìä RIEPILOGO STATO:")
    print(f"‚Ä¢ Configurazione .env: {'‚úÖ OK' if env_ok else '‚ùå MANCANTE'}")
    print(f"‚Ä¢ File implementazione: {'‚úÖ OK' if files_ok else '‚ùå INCOMPLETI'}")
    
    if env_ok and files_ok:
        print("\nüéâ TUTTO PRONTO PER LA MIGRAZIONE!")
        show_migration_instructions()
    else:
        print("\n‚ö†Ô∏è  CONFIGURAZIONE INCOMPLETA")
        if not env_ok:
            print("‚Üí Configura prima il file .env")
        if not files_ok:
            print("‚Üí Alcuni file di implementazione mancano")
    
    show_current_implementation()
    
    print("\n" + "=" * 60)
    print("üí° PROSSIMI PASSI:")
    print("1. Assicurati che .env sia configurato")
    print("2. Esegui: bash migrate.sh")
    print("3. Apri l'app e prova a modificare un ticket")
    print("4. Configura le opzioni in /settings")
    print("=" * 60)

if __name__ == "__main__":
    main()